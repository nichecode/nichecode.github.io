<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecting for Testability in Go: Using Fakes, Not Mocks on Nicholas Hammond</title><link>https://nichecode.github.io/posts/architecting-for-testability-in-go/</link><description>Recent content in Architecting for Testability in Go: Using Fakes, Not Mocks on Nicholas Hammond</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 10 Apr 2025 03:00:00 +0000</lastBuildDate><atom:link href="https://nichecode.github.io/posts/architecting-for-testability-in-go/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecting for Testability in Go (Part 3): Real-World Applications and Advanced Patterns</title><link>https://nichecode.github.io/posts/architecting-for-testability-in-go/part-3/</link><pubDate>Thu, 10 Apr 2025 03:00:00 +0000</pubDate><guid>https://nichecode.github.io/posts/architecting-for-testability-in-go/part-3/</guid><description>&lt;div class="flex rounded-md bg-primary-100 px-4 py-3 dark:bg-primary-900">
 &lt;span class="pe-3 text-primary-400">
 &lt;span class="icon relative inline-block px-1 align-text-bottom">&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">&lt;path fill="currentColor" d="M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z"/>&lt;/svg>
&lt;/span>
 &lt;/span>
 &lt;span class="dark:text-neutral-300">This is Part 3 of a 3-part series on architecting Go applications for testability. This final part covers real-world applications, metrics, and advanced patterns.&lt;/span>
&lt;/div>

&lt;h2 id="the-power-of-pure-domain-logic" class="relative group">The Power of Pure Domain Logic &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#the-power-of-pure-domain-logic" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>In 
 
 &lt;a href="https://nichecode.github.io/posts/architecting-for-testability-in-go/part-1/">Part 1&lt;/a>, we introduced the concept of structuring applications with a pure functional core surrounded by an imperative shell. Let&amp;rsquo;s dig deeper into why this pattern is so powerful for testability:&lt;/p></description></item><item><title>Architecting for Testability in Go (Part 2): Implementation Strategy and Code Examples</title><link>https://nichecode.github.io/posts/architecting-for-testability-in-go/part-2/</link><pubDate>Thu, 10 Apr 2025 02:00:00 +0000</pubDate><guid>https://nichecode.github.io/posts/architecting-for-testability-in-go/part-2/</guid><description>&lt;div class="flex rounded-md bg-primary-100 px-4 py-3 dark:bg-primary-900">
 &lt;span class="pe-3 text-primary-400">
 &lt;span class="icon relative inline-block px-1 align-text-bottom">&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">&lt;path fill="currentColor" d="M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z"/>&lt;/svg>
&lt;/span>
 &lt;/span>
 &lt;span class="dark:text-neutral-300">This is Part 2 of a 3-part series on architecting Go applications for testability. This part provides concrete implementation details and code examples.&lt;/span>
&lt;/div>

&lt;h2 id="tldr" class="relative group">TL;DR &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#tldr" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>This part provides practical implementation details and code examples for our testable architecture approach. We&amp;rsquo;ll cover interface definition, real implementations, fake implementations, and testing patterns, with complete code examples you can adapt for your projects.&lt;/p></description></item><item><title>Architecting for Testability in Go (Part 1): Foundations and Principles</title><link>https://nichecode.github.io/posts/architecting-for-testability-in-go/part-1/</link><pubDate>Thu, 10 Apr 2025 01:00:00 +0000</pubDate><guid>https://nichecode.github.io/posts/architecting-for-testability-in-go/part-1/</guid><description>&lt;div class="flex rounded-md bg-primary-100 px-4 py-3 dark:bg-primary-900">
 &lt;span class="pe-3 text-primary-400">
 &lt;span class="icon relative inline-block px-1 align-text-bottom">&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">&lt;path fill="currentColor" d="M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z"/>&lt;/svg>
&lt;/span>
 &lt;/span>
 &lt;span class="dark:text-neutral-300">This is Part 1 of a 3-part series on architecting Go applications for testability. This part covers the foundational principles and architectural approach.&lt;/span>
&lt;/div>

&lt;h2 id="introduction" class="relative group">Introduction &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#introduction" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>How easily can you understand a piece of code seconds after looking at it? How quickly can you write a meaningful test for it?&lt;/p></description></item></channel></rss>